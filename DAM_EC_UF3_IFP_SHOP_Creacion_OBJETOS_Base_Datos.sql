-- MySQL Script generated by MySQL Workbench
-- Sat Sep 30 14:12:19 2023
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema IFP_SHOP
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `IFP_SHOP` ;

-- -----------------------------------------------------
-- Schema IFP_SHOP
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `IFP_SHOP` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `IFP_SHOP` ;

-- -----------------------------------------------------
-- Table `IFP_SHOP`.`DESCUENTOS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`DESCUENTOS` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`DESCUENTOS` (
  `ID_DESCUENTO` INT NOT NULL AUTO_INCREMENT,
  `FRECUENCIA_COMPRA` INT(2) NOT NULL,
  `DESCUENTO` INT(2) NOT NULL DEFAULT '0',
  PRIMARY KEY (`ID_DESCUENTO`)
) 
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `IFP_SHOP`.`TIPOS_PRODUCTOS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`TIPOS_PRODUCTOS` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`TIPOS_PRODUCTOS` (
  `ID_TIPO_PRODUCTO` INT NOT NULL AUTO_INCREMENT,
  `NOM_TIPO_PRODUCTO` VARCHAR(45) NOT NULL,
  `DESC_TIPO_PRODUCTO` VARCHAR(256) NULL,
  `ACTIVO` CHAR(1) NOT NULL DEFAULT 'S',
  PRIMARY KEY (`ID_TIPO_PRODUCTO`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `IFP_SHOP`.`PRODUCTOS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`PRODUCTOS` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`PRODUCTOS` (
  `ID_PRODUCTO` INT NOT NULL AUTO_INCREMENT,
  `NOM_PRODUCTO` VARCHAR(128) NOT NULL,
  `DESC_PRODUCTO` VARCHAR(256) NOT NULL,
  `PRECIO_UNITARIO` DECIMAL(10,2) NOT NULL,
  `CANTIDAD_POR_UNIDAD` INT NOT NULL DEFAULT '1',
  `COLOR` VARCHAR(45) NULL DEFAULT NULL,
  `MEDIDAS` VARCHAR(45) NULL,
  `ID_TIPO_PRODUCTO` INT NOT NULL,
  PRIMARY KEY (`ID_PRODUCTO`),
  CONSTRAINT `fk_PRODUCTOS_TIPOS_PRODUCTOS1`
    FOREIGN KEY (`ID_TIPO_PRODUCTO`)
    REFERENCES `IFP_SHOP`.`TIPOS_PRODUCTOS` (`ID_TIPO_PRODUCTO`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


CREATE INDEX `fk_PRODUCTOS_TIPOS_PRODUCTOS1_idx` ON `IFP_SHOP`.`PRODUCTOS` (`ID_TIPO_PRODUCTO` ASC);


-- -----------------------------------------------------
-- Table `IFP_SHOP`.`CLIENTES`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`CLIENTES` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`CLIENTES` (
  `ID_CLIENTE` INT NOT NULL AUTO_INCREMENT,
  `NOM_CLIENTE` VARCHAR(80) NOT NULL,
  `APELLIDOS_CLIENTE` VARCHAR(128) NOT NULL,
  `DIRECCION_CLIENTE` VARCHAR(80) NOT NULL,
  `CODIGO_POSTAL` CHAR(5) NOT NULL,
  `POBLACION` VARCHAR(80) NOT NULL,
  `PROVINCIA` VARCHAR(40) NOT NULL,
  `TELF_CLIENTE` VARCHAR(10) NULL,
  `EMAIL_CLIENTE` VARCHAR(80) NULL,
  PRIMARY KEY (`ID_CLIENTE`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `IFP_SHOP`.`TIPO_PAGOS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`TIPO_PAGOS` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`TIPO_PAGOS` (
  `ID_PAGO` INT NOT NULL AUTO_INCREMENT,
  `TIPO_PAGO` VARCHAR(45) NOT NULL,
  `COMENTARIOS_PAGO` VARCHAR(256) NULL,
  PRIMARY KEY (`ID_PAGO`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `IFP_SHOP`.`TRANSPORTISTAS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`TRANSPORTISTAS` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`TRANSPORTISTAS` (
  `ID_TRANSPORTISTA` INT NOT NULL AUTO_INCREMENT,
  `NOM_TRANSPORTISTA` VARCHAR(80) NOT NULL,
  `TELF_TRANSPORTISTA` VARCHAR(10) NOT NULL,
  `EMAIL_TRANSPORTISTA` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`ID_TRANSPORTISTA`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `IFP_SHOP`.`PEDIDOS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`PEDIDOS` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`PEDIDOS` (
  `ID_PEDIDO` INT NOT NULL AUTO_INCREMENT,
  `NUM_PEDIDO` VARCHAR(45) NOT NULL,
  `FECHA_PEDIDO` DATE NOT NULL,
  `FECHA_ENVIO` DATE NULL,
  `ESTADO_PEDIDO` VARCHAR(20) NOT NULL DEFAULT 'Recibido',
  `ID_CLIENTE` INT NOT NULL,
  `ID_PAGO` INT NOT NULL,
  `ID_TRANSPORTISTA` INT NULL,
  PRIMARY KEY (`ID_PEDIDO`),
  CONSTRAINT `fk_PEDIDOS_CLIENTES1`
    FOREIGN KEY (`ID_CLIENTE`)
    REFERENCES `IFP_SHOP`.`CLIENTES` (`ID_CLIENTE`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PEDIDOS_PAGOS1`
    FOREIGN KEY (`ID_PAGO`)
    REFERENCES `IFP_SHOP`.`TIPO_PAGOS` (`ID_PAGO`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PEDIDOS_TRANSPORTISTAS1`
    FOREIGN KEY (`ID_TRANSPORTISTA`)
    REFERENCES `IFP_SHOP`.`TRANSPORTISTAS` (`ID_TRANSPORTISTA`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `fk_PEDIDOS_CLIENTES1_idx` ON `IFP_SHOP`.`PEDIDOS` (`ID_CLIENTE` ASC) VISIBLE;

CREATE INDEX `fk_PEDIDOS_PAGOS1_idx` ON `IFP_SHOP`.`PEDIDOS` (`ID_PAGO` ASC) VISIBLE;

CREATE UNIQUE INDEX `NUM_PEDIDO_UNIQUE` ON `IFP_SHOP`.`PEDIDOS` (`NUM_PEDIDO` ASC) VISIBLE;

CREATE INDEX `fk_PEDIDOS_TRANSPORTISTAS1_idx` ON `IFP_SHOP`.`PEDIDOS` (`ID_TRANSPORTISTA` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IFP_SHOP`.`DETALLES_PEDIDO`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`DETALLES_PEDIDO` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`DETALLES_PEDIDO` (
  `ID_DETALLE_PRODUCTO` INT NOT NULL,
  `ID_PEDIDO` INT NOT NULL,
  `ID_PRODUCTO` INT NOT NULL,
  `CANTIDAD_PRODUCTO` INT NOT NULL,
  `PRECIO_UNITARIO` DECIMAL(10,2) NULL,
  `PRECIO_TOTAL_PRODUCTO` DECIMAL(10,2) NULL,
  `DESCUENTO` DECIMAL(5,2) NULL,
  `IMPORTE_TOTAL_PRODUCTO` DECIMAL(10,2) NULL,
  PRIMARY KEY (`ID_DETALLE_PRODUCTO`),
  CONSTRAINT `fk_PRODUCTOS_has_PEDIDOS_PRODUCTOS1`
    FOREIGN KEY (`ID_PRODUCTO`)
    REFERENCES `IFP_SHOP`.`PRODUCTOS` (`ID_PRODUCTO`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PRODUCTOS_has_PEDIDOS_PEDIDOS1`
    FOREIGN KEY (`ID_PEDIDO`)
    REFERENCES `IFP_SHOP`.`PEDIDOS` (`ID_PEDIDO`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


CREATE INDEX `fk_PRODUCTOS_has_PEDIDOS_PEDIDOS1_idx` ON `IFP_SHOP`.`DETALLES_PEDIDO` (`ID_PEDIDO` ASC) VISIBLE;

CREATE INDEX `fk_PRODUCTOS_has_PEDIDOS_PRODUCTOS1_idx` ON `IFP_SHOP`.`DETALLES_PEDIDO` (`ID_PRODUCTO` ASC) VISIBLE;


-- -----------------------------------------------------
-- Table `IFP_SHOP`.`PROVEEDORES`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`PROVEEDORES` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`PROVEEDORES` (
  `ID_PROVEEDOR` INT NOT NULL AUTO_INCREMENT,
  `NOM_PROVEEDOR` VARCHAR(80) NOT NULL,
  `PAIS` VARCHAR(45) NOT NULL,
  `EMAIL_PROVEEDOR` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`ID_PROVEEDOR`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

-- -----------------------------------------------------
-- Table `IFP_SHOP`.`PROVEEDORES_PRODUCTOS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `IFP_SHOP`.`PROVEEDORES_PRODUCTOS` ;

CREATE TABLE IF NOT EXISTS `IFP_SHOP`.`PROVEEDORES_PRODUCTOS` (
  `ID_PROVEEDOR_PRODUCTO` INT NOT NULL AUTO_INCREMENT,
  `ID_PROVEEDOR` INT NOT NULL,
  `ID_PRODUCTO` INT NOT NULL,
  PRIMARY KEY (`ID_PROVEEDOR_PRODUCTO`),
  CONSTRAINT `fk_PROVEEDORES_has_PRODUCTOS_PROVEEDORES1`
    FOREIGN KEY (`ID_PROVEEDOR`)
    REFERENCES `IFP_SHOP`.`PROVEEDORES` (`ID_PROVEEDOR`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PROVEEDORES_has_PRODUCTOS_PRODUCTOS1`
    FOREIGN KEY (`ID_PRODUCTO`)
    REFERENCES `IFP_SHOP`.`PRODUCTOS` (`ID_PRODUCTO`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

CREATE INDEX `fk_PROVEEDORES_has_PRODUCTOS_PRODUCTOS1_idx` ON `IFP_SHOP`.`PROVEEDORES_PRODUCTOS` (`ID_PRODUCTO` ASC) VISIBLE;

CREATE INDEX `fk_PROVEEDORES_has_PRODUCTOS_PROVEEDORES1_idx` ON `IFP_SHOP`.`PROVEEDORES_PRODUCTOS` (`ID_PROVEEDOR` ASC) VISIBLE;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;


DROP procedure IF EXISTS `PR_CARGA_DETALLES_PEDIDO`;

DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PR_CARGA_DETALLES_PEDIDO`(IN n_MaxProd INTEGER, IN n_MinProd INTEGER)
BEGIN

DECLARE n_IdMaxPEDIDO, n_IdMinPEDIDO INTEGER;
DECLARE n_IdMaxPROD, n_IdMinPROD INTEGER;
DECLARE n_idx   INTEGER;
DECLARE n_IdPedido INTEGER;
DECLARE n_NumProd INTEGER;
DECLARE n_IdProducto_aux INTEGER;
DECLARE n_precioUnitario INTEGER;
DECLARE n_CantidadProducto INTEGER;
DECLARE v_finalCursor BOOLEAN;
DECLARE n_IdDetalleProducto INTEGER;

-- Decalro un cursor para recorrer todos los pedidos
DECLARE cur_pedidos CURSOR FOR
SELECT ID_PEDIDO
FROM PEDIDOS;
-- Declaro la variable de final de cursor
DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_finalCursor = TRUE;

-- Lo usar√© para genera la FK a PEDIDOS
SELECT MAX(ID_PEDIDO), MIN(ID_PEDIDO)
INTO n_IdMaxPEDIDO, n_IdMinPEDIDO
FROM PEDIDOS;

-- Lo usar√© para genera la FK a PRODUCTOS
SELECT MAX(ID_PRODUCTO), MIN(ID_PRODUCTO)
INTO n_IdMaxPROD, n_IdMinPROD
FROM PRODUCTOS;


OPEN cur_pedidos;
relleno_pedido: LOOP
  FETCH cur_pedidos INTO n_IdPedido; -- empiezo a recorrer los registros de PEDIDOS
  IF v_finalCursor THEN
    LEAVE relleno_pedido;
  END IF;
  
  -- Selecciono al azar el numero de productos del pedido
  SELECT rand()*(n_MaxProd-n_MinProd)+n_MinProd INTO n_NumProd
  FROM DUAL;
  
  SET n_idx := 1;
  WHILE n_idx <= n_NumProd DO
  
    -- elijo un producto al azar
    SELECT ID_PRODUCTO, PRECIO_UNITARIO INTO n_IdProducto_aux, n_precioUnitario
	FROM PRODUCTOS
	ORDER BY RAND()
	LIMIT 1;
    
    /*SELECT ROUND(RAND()*(n_IdMaxPROD-n_IdMinPROD)+n_IdMinPROD,0)
    FROM DUAL;
    
    SELECT PRECIO_UNITARIO INTO n_precioUnitario
    FROM PRODUCTO
    WHERE ID_PRODUCTO = n_IdProducto_aux;*/
    
    -- por hardcode limito la cantidad de producto entre 1 y 1000 unidades aleatoriamente
    SELECT round(rand()*(1000-1)+1,0) INTO n_CantidadProducto 
    FROM DUAL;
    
    -- La primary key de DETALLES_PRODUCTO no es autoincremental, genero un ID
    select IFNULL(max(ID_DETALLE_PRODUCTO)+1,1) INTO n_IdDetalleProducto
    FROM DETALLES_PEDIDO;
    
    INSERT INTO DETALLES_PEDIDO (ID_DETALLE_PRODUCTO, ID_PEDIDO, ID_PRODUCTO, CANTIDAD_PRODUCTO, PRECIO_UNITARIO, PRECIO_TOTAL_PRODUCTO, DESCUENTO, IMPORTE_TOTAL_PRODUCTO)
    SELECT n_IdDetalleProducto,
           n_IdPedido,
 	  	   n_IdProducto_aux,
           n_CantidadProducto,
           n_precioUnitario,
           round(n_precioUnitario*n_CantidadProducto,2),
           0, -- por hardcode pongo el descuento a zero
           round(n_precioUnitario*n_CantidadProducto,2) 
     FROM dual;
     SET n_idx := n_idx+1;  

  END WHILE;
END LOOP relleno_pedido;
CLOSE cur_pedidos;
COMMIT;

END$$

DELIMITER ;



DROP procedure IF EXISTS `PR_CARGA_PEDIDOS`;

DELIMITER $$
CREATE DEFINER=`root`@`localhost` PROCEDURE `PR_CARGA_PEDIDOS`(IN n_NumRegistros INTEGER)
BEGIN

DECLARE n_IdMaxCLI, n_IdMinCLI INTEGER;
DECLARE n_IdMaxPAGO, n_IdMinPAGO INTEGER;
DECLARE n_IdMaxTRANS, n_IdMinTRANS INTEGER;
DECLARE n_idx   INTEGER;
DECLARE n_aux   INTEGER;
DECLARE n_diasAnyo INTEGER;
DECLARE d_fechaPedido DATE;

-- Lo usar√© para genera la FK a CLIENTES
SELECT MAX(ID_PAGO), MIN(ID_PAGO)
INTO n_IdMaxPAGO, n_IdMinPAGO
FROM TIPO_PAGOS;

-- Lo usar√© para genera la FK a CLIENTES
SELECT MAX(ID_CLIENTE), MIN(ID_CLIENTE)
INTO n_IdMaxCLI, n_IdMinCLI
FROM CLIENTES;

-- Lo usar√© para genera la FK a CLIENTES
SELECT MAX(ID_TRANSPORTISTA), MIN(ID_TRANSPORTISTA)
INTO n_IdMaxTRANS, n_IdMinTRANS
FROM TRANSPORTISTAS;

-- Obtengo los dias que llevamos de a√±o
SELECT DATEDIFF(CURRENT_DATE(),STR_TO_DATE('01-01-2023','%d-%m-%Y')) 
INTO n_diasAnyo 
FROM DUAL; 

-- lo uso para generar el numero pedido
SELECT COUNT('A')+1 INTO n_aux
FROM PEDIDOS;

SET n_idx := 1; -- Inicializa el indice del loop
WHILE n_idx <= n_NumRegistros DO
 
 -- Obtengo la fecha del pedido
 SELECT DATE_SUB(CURRENT_DATE(), INTERVAL RAND()*(n_diasAnyo-1)+1 DAY)
 INTO d_fechaPedido
 FROM DUAL;

 INSERT INTO PEDIDOS (NUM_PEDIDO, FECHA_PEDIDO, FECHA_ENVIO, ESTADO_PEDIDO, ID_CLIENTE, ID_PAGO, ID_TRANSPORTISTA)
 SELECT CONCAT('2023_A000',n_aux+n_idx),
		d_fechaPedido,
		DATE_ADD(d_fechaPedido, INTERVAL RAND()*(10-1)+1 DAY),
		CASE round(rand()*3,0)
             WHEN 0 THEN 'Validado'
             WHEN 1 THEN 'Pagado'
             WHEN 2 THEN 'Entregado'
             WHEN 3 THEN 'Pendiente de pago'
             ELSE 'Sin Stock'
		END,
		round(rand()*(n_IdMaxCLI-n_IdMinCLI)+n_IdMinCLI,0),
        round(rand()*(n_IdMaxPAGO-n_IdMinPAGO)+n_IdMinPAGO,0),
		round(rand()*(n_IdMaxTRANS-n_IdMinTRANS)+n_IdMinTRANS,0)
   FROM dual;
 SET n_idx := n_idx+1;  
END WHILE;

COMMIT;

END$$

DELIMITER ;



DROP procedure IF EXISTS `PR_CARGA_PRODUCTOS`;

DELIMITER $$

CREATE DEFINER=`root`@`localhost` PROCEDURE `PR_CARGA_PRODUCTOS`(IN n_NumRegistros INTEGER)
BEGIN

DECLARE n_IdMax INTEGER;
DECLARE n_IdMin INTEGER;
DECLARE n_idx   INTEGER;
DECLARE n_aux   INTEGER;

SELECT MAX(id_tipo_producto), MIN(id_tipo_producto)
INTO n_IdMax, n_IdMin
FROM TIPOS_PRODUCTOS;

SELECT COUNT('A') INTO n_aux
FROM PRODUCTOS
WHERE NOM_PRODUCTO LIKE 'Producto_%';

SET n_idx := 1;
WHILE n_idx <= n_NumRegistros DO
 INSERT INTO productos (NOM_PRODUCTO, DESC_PRODUCTO, PRECIO_UNITARIO, CANTIDAD_POR_UNIDAD, COLOR, MEDIDAS, ID_TIPO_PRODUCTO)
 SELECT CONCAT('Producto_',n_aux+n_idx),
		CONCAT('Descripci√≥n del producto ',n_aux+n_idx),
         round(rand()*1000,2),
         5*round(rand()*10,0),
         case round(rand()*5,0)
             when 0 then 'Blanco'
             when 1 then 'Negro'
             when 2 then 'Rojo'
             when 3 then 'Verde'
             when 4 then 'Amarillo'
             when 5 then 'Metalico'
             else 'Transparente'
		 end,
         CONCAT(round(rand()*100,2),'x',round(rand()*100,2),'x',round(rand()*100,2)),
         round(rand()*(n_IdMax-n_IdMin)+n_IdMin,0)
   FROM dual;
 SET n_idx := n_idx+1;  
END WHILE;

COMMIT;

END$$

DELIMITER ;






